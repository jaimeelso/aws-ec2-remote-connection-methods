##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on X: @jaimeelso https://x.com/jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 21/08/2023
 #
 # Version 1.0 Create a new VPC with one private subnet and a EC2 instance. The EC2 instance is only accessible trough a Instance Connect Endpoint
 #
 # Description: This CloudFormation template deploy all the resouces needed to show how to connect trough a Instance Connect Endpoint to a EC2 instance in a private subnet
##
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template deploy all the resouces needed to show how to connect trough a Instance Connect Endpoint to a EC2 instance in a private subnet'
Parameters:
  VPCClassB:
    Description: 'SecondOctet of VPC (10.X.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  VPCName:
    Description: 'Name of the VPC'
    Type: String
    Default: 'Instance-Connect-Endpoint'
  AvailabilityZone:
    Description: 'Availability Zone'
    Type: String
    Default: 'eu-west-1a'
  AMI:
    Description: 'AMI ID'
    Type: String
    Default: 'ami-05a3d90809a151346'
Resources:
  ########## Network ##########
  # VPC 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${VPCClassB}.0.0/16'
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Private subnet to deploy the EC2 instance
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.1.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnet'
  # Instance Connect Endpoint to connect to the EC2 instance
  InstanceConnectEndpoint:
    Type: 'AWS::EC2::InstanceConnectEndpoint'
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref ElasticNetworkInterfaceSecurityGroup
      SubnetId: !Ref PrivateSubnet
  # Security group for the aplication instance
  ElasticNetworkInterfaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the Elastic Network Interface'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub '10.${VPCClassB}.1.0/24'
      Tags:
        - Key: Name
          Value: ElasticNetworkInterfaceSecurityGroup

  ########## EC2 ##########
  # EC2 instance for the aplication instance in the private subnet
  AplicationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't2.micro'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref AplicationInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstance
  # Security group for the aplication instance
  AplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the aplication instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref ElasticNetworkInterfaceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstanceSecurityGroup