##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on X: @jaimeelso https://x.com/jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 28/08/2023
 #
 # Version 1.0 Create a new VPC with one subnet, an EC2 instance with SSM Session Manager 
 #
 # Description: This CloudFormation template deploy all the resouces needed to show how to connect trough a SSM Session Manager to a EC2 instance in a public subnet
##
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template deploy all the resouces needed to show how to connect trough a SSM Session Manager to a EC2 instance in a public subnet'
Parameters:
  VPCClassB:
    Description: 'SecondOctet of VPC (10.X.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  VPCName:
    Description: 'Name of the VPC'
    Type: String
    Default: 'SSM-SessionManager'
  AvailabilityZone:
    Description: 'Availability Zone'
    Type: String
    Default: 'eu-west-1a'
  AMI:
    Description: 'AMI ID'
    Type: String
    Default: 'ami-05a3d90809a151346'
Resources:
  ########## Network ##########
  # VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${VPCClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Internet Gateway to connect to the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-InternetGateway'
  # Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public subnet to deploy the bastion host
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.1.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicSubnet'
  # Route table for the public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicRouteTable'
  # Public route to the internet
  PublicRouteTablePublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # Associate the public subnet to the public route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  ########## EC2 ##########
  # EC2 instance for the aplication instance in the public subnet
  AplicationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't2.micro'
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref AplicationtInstanceProfile
      SecurityGroupIds:
        - !Ref AplicationInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstance
  # Security group for the aplication instance to connect with SSM Session Manager endpoint
  AplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the Aplication Instance to connect with SSM Session Manager endpoint'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: AplicationInstanceSecurityGroup
  # Aplication Instance Role with managed policy to connect with SSM Session Manager endpoint
  AplicationInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'AplicationInstanceRole'
      Description: 'Allow Aplication Instance SSM Session Manager agent to call AWS services on your behalf'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
  # Aplication Instance Instance Profile
  AplicationtInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'AplicationtInstanceProfile'
      Roles:
        - !Ref AplicationInstanceRole