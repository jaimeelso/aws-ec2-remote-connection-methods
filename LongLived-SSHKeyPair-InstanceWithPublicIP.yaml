##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on X: @jaimeelso https://x.com/jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 04/07/2023
 #
 # Version 1.0 Create a new VPC with one subnet and EC2 instance
 #
 # Description: This CloudFormation template deploy all the resouces needed to show how to connect by SSH with long lived key pair to a EC2 instance in a public subnet
##
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template deploy all the resouces needed to show how to connect by SSH with long lived key pair to a EC2 instance in a public subnet'
Parameters:
  VPCClassB:
    Description: 'SecondOctet of VPC (10.X.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  VPCName:
    Description: 'Name of the VPC'
    Type: String
    Default: 'LongLived-SSHKeyPair-InstanceWithPublicIP'
  AvailabilityZone:
    Description: 'Availability Zone'
    Type: String
    Default: 'eu-west-1a'
  SSHKeyName:
    Description: 'SSH Key Name'
    Type: String
    Default: 'KeyPair'
  AMI:
    Description: 'AMI ID'
    Type: String
    Default: 'ami-05a3d90809a151346'
Resources:
  ########## Network ##########
  # VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${VPCClassB}.0.0/16'
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Internet Gateway to connect to the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-InternetGateway'
  # Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public subnet to deploy the bastion host
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.1.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicSubnet'
  # Route table for the public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicRouteTable'
  # Public route to the internet
  PublicRouteTablePublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # Associate the public subnet to the public route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  ########## EC2 ##########
  # EC2 instance for the aplication instance in the public subnet
  AplicationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't2.micro'
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref SSHKeyName
      SecurityGroupIds:
        - !Ref AplicationInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstance
  # Security group for the aplication instance
  AplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the aplication instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: AplicationInstanceSecurityGroup

# ssh -i <ruta_de_la_clave_pem> <nombre_de_usuario>@<direcciÃ³n_ip>
# chmod 400 <ruta_de_la_clave_pem>