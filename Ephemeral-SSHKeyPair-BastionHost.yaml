##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on X: @jaimeelso https://x.com/jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 30/06/2023
 #
 # Version 1.0 Create a new VPC with one public and one private subnet, a bastion host and a EC2 instance
 #
 # Description: This CloudFormation template deploy all the resouces needed to show how to connect trough a bastion host to a EC2 instance in a private subnet with long lived SSH key pair
##
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template deploy all the resouces needed to show how to connect trough a bastion host to a EC2 instance in a private subnet with long lived SSH key pair'
Parameters:
  VPCClassB:
    Description: 'SecondOctet of VPC (10.X.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  VPCName:
    Description: 'Name of the VPC'
    Type: String
    Default: 'Ephemeral-SSHKeyPair-BastionHost'
  AvailabilityZone:
    Description: 'Availability Zone'
    Type: String
    Default: 'eu-west-1a'
  AMI:
    Description: 'AMI ID'
    Type: String
    Default: 'ami-05a3d90809a151346'
Resources:
  ########## Network ##########
  # VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${VPCClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Internet Gateway to connect to the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-InternetGateway'
  # Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public subnet to deploy the bastion host
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.1.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicSubnet'
  # Route table for the public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicRouteTable'
  # Public route to the internet
  PublicRouteTablePublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # Associate the public subnet to the public route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  # Private subnet to deploy the EC2 instance
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.2.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnet'

  ########## EC2 ##########
  # EC2 instance for the bastion host in the public subnet
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't2.micro'
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: BastionHost
  # Security group for the bastion host
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the bastion host'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub '10.${VPCClassB}.2.0/24'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: BastionHostSecurityGroup
  # Bastion Host Role
  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'BastionHostRole'
      Description: 'Allow Bastion Host EC2 Instance Connect'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  # EC2 Instance Connect policy
  EC2InstanceConnectPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'EC2InstanceConnectPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'ec2-instance-connect:SendSSHPublicKey'
            Resource: '*'
            Condition:
              StringEquals:
                'ec2:osuser': 'ec2-user'
          - Effect: Allow
            Action: 'ec2:DescribeInstances'
            Resource: '*'
      Roles: 
        - !Ref BastionHostRole
  # Bastion Host Instance Profile
  BastionHostInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'BastionHostInstanceProfile'
      Roles:
        - !Ref BastionHostRole
  # EC2 instance for the aplication instance in the private subnet
  AplicationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't2.micro'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref AplicationInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstance
  # Security group for the aplication instance
  AplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the aplication instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstanceSecurityGroup

# ssh-keygen -t rsa -f KEY_NAME
# aws ec2-instance-connect send-ssh-public-key --region YOUR_REGION --availability-zone YOUR_AVAILABILITY_ZONE --instance-id YOUR_INSTANCE_ID --instance-os-user YOUR_USERNAME --ssh-public-key file:// KEY_NAME.pub 
# ssh -o "IdentitiesOnly=yes" -i KEY_NAME USERNAME@SERVER_ADDRESS