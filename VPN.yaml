##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on X: @jaimeelso https://x.com/jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 30/06/2023
 #
 # Version 1.0 Create a new VPC with one private subnet and a EC2 instance. The EC2 instance is only accessible trough a client VPN
 #
 # Description: This CloudFormation template deploy all the resouces needed to show how to connect trough a client VPN to a EC2 instance in a private subnet
##
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template deploy all the resouces needed to show how to connect trough a client VPN to a EC2 instance in a private subnet'
Parameters:
  VPCClassB:
    Description: 'SecondOctet of VPC (10.X.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  VPCName:
    Description: 'Name of the VPC'
    Type: String
    Default: 'VPN-VPC'
  AvailabilityZone:
    Description: 'Availability Zone'
    Type: String
    Default: 'eu-west-1a'
  SSHKeyName:
    Description: 'SSH Key Name'
    Type: String
    Default: 'KeyPair'
  AMI:
    Description: 'AMI ID'
    Type: String
    Default: 'ami-05a3d90809a151346'
  ClientCidrBlock:
    Description: 'Client CIDR Block'
    Type: String
    Default: '10.1.0.0/16'
  ServerCertificateArn:
    Description: 'Server Certificate ARN'
    Type: String
  ClientCertificateArn:
    Description: 'Client Certificate ARN'
    Type: String
Resources:
  ########## Network ##########
  # VPC 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${VPCClassB}.0.0/16'
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
  # Private subnet to deploy the EC2 instance
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${VPCClassB}.1.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnet'
  # Client VPN 
  ClientVPNEndpoint:
    Type: 'AWS::EC2::ClientVpnEndpoint'
    Properties:
      AuthenticationOptions:
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref ClientCertificateArn
      ClientCidrBlock: !Ref ClientCidrBlock
      ServerCertificateArn: !Ref ServerCertificateArn
      SplitTunnel: true
      ConnectionLogOptions:
        Enabled: false
      Description: 'Termination point for all client VPN sessions'
      TagSpecifications:
        - ResourceType: client-vpn-endpoint
          Tags:
            - Key: Name
              Value: !Sub '${VPCName}-ClientVPNEndpoint'
  # Client VPN target network association with the private subnet
  ClientVPNTargetNetworkAssociation:
    Type: 'AWS::EC2::ClientVpnTargetNetworkAssociation'
    Properties:
      ClientVpnEndpointId: !Ref ClientVPNEndpoint
      SubnetId: !Ref PrivateSubnet
  # Client VPN authorization rule to allow all traffic
  ClientVPNAuthorizationRule:
    Type: 'AWS::EC2::ClientVpnAuthorizationRule'
    Properties:
      ClientVpnEndpointId: !Ref ClientVPNEndpoint
      TargetNetworkCidr: !Sub '10.${VPCClassB}.0.0/16'
      AuthorizeAllGroups: true
      Description: 'Allow access to all users'

  ########## EC2 ##########
  # EC2 instance for the aplication instance in the private subnet
  AplicationInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: 't3.micro'
      SubnetId: !Ref PrivateSubnet
      KeyName: !Ref SSHKeyName
      SecurityGroupIds:
        - !Ref AplicationInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstance
  # Security group for the aplication instance
  AplicationInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the aplication instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt VPC.DefaultSecurityGroup
      Tags:
        - Key: Name
          Value: AplicationInstanceSecurityGroup

# Generate certificate for the client VPN: https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/mutual.html
# ssh -i <ruta_de_la_clave_pem> <nombre_de_usuario>@<direcciÃ³n_ip_del_bastion_host>
# chmod 400 <ruta_de_la_clave_pem>